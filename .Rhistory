# parallel computing
(ncores <- detectCores())
nworkers <- ncores - 1
cl <- makeCluster(nworkers)
registerDoParallel(cl)
registerDoRNG(12345)
# start timer
start.time <- Sys.time()
# simulate
sim_out <- foreach(i=1:nrow(input), .combine=rbind,
.packages=c("MASS","KRLS")
) %dopar% {
SimFunc(n=input$n[i],input$corr_xe[i],input$corr_xz[i],input$corr_ze[i]
,beta=1,gamma1=.5,gamma2=input$gamma2[i],exogenous=input$exogenous[i]
,firststage="linear",k=k,kfunc="normal",bandwidth=input$bw[i]
,span=.2)
}
stopCluster(cl)
(time.taken <- Sys.time() - start.time)
session_info <- sessionInfo()
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE[1,i] <- sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
RMSE[2,i] <- sqrt((sum((sim_out$beta_twoSLS-1)^2)/unique(input$n)[i]))
RMSE[3,i] <- sqrt((sum((sim_out$beta_kernel-1)^2)/unique(input$n)[i]))
RMSE[4,i] <- sqrt((sum((sim_out$beta_lowess-1)^2)/unique(input$n)[i]))
RMSE[5,i] <- sqrt((sum((sim_out$beta_krls-1)^2)/unique(input$n)[i]))
}
View(RMSE)
input$gamma2
input$exogenous
input$corr_xe
input$corr_xz
input$corr_ze
input$bw
View(RMSE)
input$bw
# clean environment
rm(list=ls())
### load packages
# parallel computing
library(foreach)
library(doParallel)
library(doRNG)
# read simulation function
source("./SimFunc.R")
###################
# MONTE CARLO SIMULATION
# parameters
n <- c(100,500,1000)
corr_xe <- c(.3,.6) # degree of endogeneity in x
corr_xz <- c(.3,.6) # strength of instrument z
corr_ze <- c(0,.3,.6) # validity of instrument z
gamma2 <- c(0,.5) # how is gamma2 > 0 specified? For now: .5
bw <- c(.2,.5,.8)
exogenous <- c(FALSE,TRUE)
k <- 100 # number of bootstrap iterations
grid <- matrix(as.matrix(cbind(expand.grid(n,corr_xe,corr_xz,corr_ze,gamma2,bw,exogenous))),ncol=7
,dimnames=list(NULL, c("n", "corr_xe","corr_xz","corr_ze","gamma2","bw","exogenous")))
ninput <- nrow(grid)
nsim <- 100#0
# specify function inputs
input <- data.frame(do.call(rbind,replicate(nsim,grid,simplify=F)))
input <- input[order(input$exogenous,input$n,input$bw,input$corr_xe
,input$corr_xz,input$corr_ze,input$gamma2),]
input$exogenous <- input$exogenous==1
#unique(input)
rownames(input) <- 1:nrow(input)
# check
nrow(input)==ninput*nsim
# test
SimFunc(n=input$n[1],input$corr_xe[1],input$corr_xz[1],input$corr_ze[1]
,beta=1,gamma1=1,gamma2=input$gamma2[1],exogenous=input$exogenous[1]
,firststage="quadratic",k=k,kfunc="normal",bandwidth=input$bw[1],span=2/3)
# select scenario
sel <- (input$corr_xe==.6 & input$corr_xz==.6 & input$corr_ze==0 & input$bw==.5
& input$exogenous==F & input$gamma2!=0)
sum(sel)
input <- input[sel,]
# parallel computing
(ncores <- detectCores())
nworkers <- ncores - 1
cl <- makeCluster(nworkers)
registerDoParallel(cl)
registerDoRNG(12345)
# start timer
start.time <- Sys.time()
# simulate
sim_out <- foreach(i=1:nrow(input), .combine=rbind,
.packages=c("MASS","KRLS")
) %dopar% {
SimFunc(n=input$n[i],input$corr_xe[i],input$corr_xz[i],input$corr_ze[i]
,beta=1,gamma1=.5,gamma2=input$gamma2[i],exogenous=input$exogenous[i]
,firststage="quadratic",k=k,kfunc="normal",bandwidth=input$bw[i]
,span=.2)
}
stopCluster(cl)
(time.taken <- Sys.time() - start.time)
session_info <- sessionInfo()
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE[1,i] <- sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
RMSE[2,i] <- sqrt((sum((sim_out$beta_twoSLS-1)^2)/unique(input$n)[i]))
RMSE[3,i] <- sqrt((sum((sim_out$beta_kernel-1)^2)/unique(input$n)[i]))
RMSE[4,i] <- sqrt((sum((sim_out$beta_lowess-1)^2)/unique(input$n)[i]))
RMSE[5,i] <- sqrt((sum((sim_out$beta_krls-1)^2)/unique(input$n)[i]))
}
View(RMSE)
RMSE2 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE2[1,i] <- mean(sqrt(sim_out$beta_ols-1)^2)
RMSE2[2,i] <- mean(sqrt(sim_out$beta_twoSLS-1)^2)
RMSE2[3,i] <- mean(sqrt(sim_out$beta_kernel-1)^2)
RMSE2[4,i] <- mean(sqrt(sim_out$beta_lowess-1)^2)
RMSE2[5,i] <- mean(sqrt(sim_out$beta_krls-1)^2)
}
warnings()
sim_out$beta_ols-1
sqrt(sim_out$beta_ols-1)^2
mean(sqrt(sim_out$beta_ols-1)^2)
mean(sqrt(sim_out$beta_twoSLS-1)^2)
sqrt(sim_out$beta_twoSLS-1)
sim_out$beta_twoSLS-1
# RMSE
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE[1,i] <- sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
RMSE[2,i] <- sqrt((sum((sim_out$beta_twoSLS-1)^2)/unique(input$n)[i]))
RMSE[3,i] <- sqrt((sum((sim_out$beta_kernel-1)^2)/unique(input$n)[i]))
RMSE[4,i] <- sqrt((sum((sim_out$beta_lowess-1)^2)/unique(input$n)[i]))
RMSE[5,i] <- sqrt((sum((sim_out$beta_krls-1)^2)/unique(input$n)[i]))
}
RMSE2 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE2[1,i] <- mean(sqrt((sim_out$beta_ols-1)^2))
RMSE2[2,i] <- mean(sqrt((sim_out$beta_twoSLS-1)^2))
RMSE2[3,i] <- mean(sqrt((sim_out$beta_kernel-1)^2))
RMSE2[4,i] <- mean(sqrt((sim_out$beta_lowess-1)^2))
RMSE2[5,i] <- mean(sqrt((sim_out$beta_krls-1)^2))
}
View(RMSE2)
length(unique(input$n)
)
sim_out$beta_ols
sim_out$beta_ols[input$n==i]
input$n
n[i]
n
sim_out$beta_ols[input$n==n[i]]
RMSE2 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE2[1,i] <- mean(sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE2[2,i] <- mean(sqrt((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE2[3,i] <- mean(sqrt((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE2[4,i] <- mean(sqrt((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE2[5,i] <- mean(sqrt((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
View(RMSE2)
unique(input$n)
unique(input$n)[i]
sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
mean(sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2))
(sim_out$beta_ols[input$n==n[i]]-1)^2)
sim_out$beta_ols[input$n==n[i]]-1)^2)
(sim_out$beta_ols[input$n==n[i]]-1)^2)
(sim_out$beta_ols[input$n==n[i]]-1)^2)
(sim_out$beta_ols[input$n==n[i]]-1)^2)
(sim_out$beta_ols[input$n==n[i]]-1)^2)
(sim_out$beta_ols[input$n==n[i]]-1)^2)
(sim_out$beta_ols[input$n==n[i]]-1)^2
sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2)
mean(sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2))
mean(sqrt((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
mean(sqrt((sim_out$beta_kernel[input$n==n[i]]-1)^2))
mean(sqrt((sim_out$beta_lowess[input$n==n[i]]-1)^2))
mean(sqrt((sim_out$beta_krls[input$n==n[i]]-1)^2))
rm(list=ls())
### load packages
# parallel computing
library(foreach)
library(doParallel)
library(doRNG)
# read simulation function
source("./SimFunc.R")
source("./SimFunc.R")
rm(list=ls())
### load packages
# parallel computing
library(foreach)
library(doParallel)
library(doRNG)
# read simulation function
source("./SimFunc.R")
###################
# MONTE CARLO SIMULATION
# parameters
n <- c(100,500,1000)
corr_xe <- c(.3,.6) # degree of endogeneity in x
corr_xz <- c(.3,.6) # strength of instrument z
corr_ze <- c(0,.3,.6) # validity of instrument z
gamma2 <- c(0,.5) # how is gamma2 > 0 specified? For now: .5
bw <- c(.2,.5,.8)
exogenous <- c(FALSE,TRUE)
k <- 100 # number of bootstrap iterations
grid <- matrix(as.matrix(cbind(expand.grid(n,corr_xe,corr_xz,corr_ze,gamma2,bw,exogenous))),ncol=7
,dimnames=list(NULL, c("n", "corr_xe","corr_xz","corr_ze","gamma2","bw","exogenous")))
ninput <- nrow(grid)
nsim <- 100#0
# specify function inputs
input <- data.frame(do.call(rbind,replicate(nsim,grid,simplify=F)))
input <- input[order(input$exogenous,input$n,input$bw,input$corr_xe
,input$corr_xz,input$corr_ze,input$gamma2),]
input$exogenous <- input$exogenous==1
#unique(input)
rownames(input) <- 1:nrow(input)
# check
nrow(input)==ninput*nsim
SimFunc(n=input$n[1],input$corr_xe[1],input$corr_xz[1],input$corr_ze[1]
,beta=1,gamma1=1,gamma2=input$gamma2[1],exogenous=input$exogenous[1]
,firststage="quadratic",k=k,kfunc="normal",bandwidth=input$bw[1])
input$gamma2
sel <- (input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$bw==.5
& input$exogenous==F & input$gamma2!=0)
sum(sel)
input <- input[sel,]
# parallel computing
(ncores <- detectCores())
nworkers <- ncores - 1
cl <- makeCluster(nworkers)
registerDoParallel(cl)
registerDoRNG(12345)
# start timer
start.time <- Sys.time()
# simulate
sim_out <- foreach(i=1:nrow(input), .combine=rbind,
.packages=c("MASS","KRLS")
) %dopar% {
SimFunc(n=input$n[i],input$corr_xe[i],input$corr_xz[i],input$corr_ze[i]
,beta=1,gamma1=.5,gamma2=input$gamma2[i],exogenous=input$exogenous[i]
,firststage="quadratic",k=k,kfunc="normal",bandwidth=input$bw[i])
}
stopCluster(cl)
(time.taken <- Sys.time() - start.time)
session_info <- sessionInfo()
# RMSE
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE[1,i] <- sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
RMSE[2,i] <- sqrt((sum((sim_out$beta_twoSLS-1)^2)/unique(input$n)[i]))
RMSE[3,i] <- sqrt((sum((sim_out$beta_kernel-1)^2)/unique(input$n)[i]))
RMSE[4,i] <- sqrt((sum((sim_out$beta_lowess-1)^2)/unique(input$n)[i]))
RMSE[5,i] <- sqrt((sum((sim_out$beta_krls-1)^2)/unique(input$n)[i]))
}
RMSE2 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE2[1,i] <- mean(sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE2[2,i] <- mean(sqrt((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE2[3,i] <- mean(sqrt((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE2[4,i] <- mean(sqrt((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE2[5,i] <- mean(sqrt((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
View(RMSE)
View(RMSE2)
RMSE3 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE3[1,i] <- sqrt(mean((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE3[2,i] <- sqrt(mean((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE3[3,i] <- sqrt(mean((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE3[4,i] <- sqrt(mean((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE3[5,i] <- sqrt(mean((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
View(RMSE3)
View(input)
View(RMSE3)
# clean environment
rm(list=ls())
### load packages
# parallel computing
library(foreach)
library(doParallel)
library(doRNG)
# read simulation function
source("./SimFunc.R")
###################
# MONTE CARLO SIMULATION
# parameters
n <- c(100,500,1000)
corr_xe <- c(.3,.6) # degree of endogeneity in x
corr_xz <- c(.3,.6) # strength of instrument z
corr_ze <- c(0,.3,.6) # validity of instrument z
gamma2 <- c(0,.5) # how is gamma2 > 0 specified? For now: .5
bw <- c(.2,.5,.8)
exogenous <- c(FALSE,TRUE)
k <- 100 # number of bootstrap iterations
grid <- matrix(as.matrix(cbind(expand.grid(n,corr_xe,corr_xz,corr_ze,gamma2,bw,exogenous))),ncol=7
,dimnames=list(NULL, c("n", "corr_xe","corr_xz","corr_ze","gamma2","bw","exogenous")))
ninput <- nrow(grid)
nsim <- 1000
# specify function inputs
input <- data.frame(do.call(rbind,replicate(nsim,grid,simplify=F)))
input <- input[order(input$exogenous,input$n,input$bw,input$corr_xe
,input$corr_xz,input$corr_ze,input$gamma2),]
input$exogenous <- input$exogenous==1
#unique(input)
rownames(input) <- 1:nrow(input)
# check
nrow(input)==ninput*nsim
# test
SimFunc(n=input$n[1],input$corr_xe[1],input$corr_xz[1],input$corr_ze[1]
,beta=1,gamma1=1,gamma2=input$gamma2[1],exogenous=input$exogenous[1]
,firststage="quadratic",k=k,kfunc="normal",bandwidth=input$bw[1])
# select scenario
#sel <- (input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$bw==.5
#        & input$exogenous==F & input$gamma2!=0)
#sum(sel)
#input <- input[sel,]
# parallel computing
(ncores <- detectCores())
nworkers <- ncores - 1
cl <- makeCluster(nworkers)
registerDoParallel(cl)
registerDoRNG(12345)
# start timer
start.time <- Sys.time()
# simulate
sim_out <- foreach(i=1:nrow(input), .combine=rbind,
.packages=c("MASS","KRLS")
) %dopar% {
SimFunc(n=input$n[i],input$corr_xe[i],input$corr_xz[i],input$corr_ze[i]
,beta=1,gamma1=.5,gamma2=input$gamma2[i],exogenous=input$exogenous[i]
,firststage="quadratic",k=k,kfunc="normal",bandwidth=input$bw[i])
}
stopCluster(cl)
(time.taken <- Sys.time() - start.time)
session_info <- sessionInfo()
# create empty folder (if not existing already)
ifelse(!dir.exists(file.path("./Output"))
,dir.create(file.path("./Output")), FALSE)
# save output
save(input,sim_out,nsim,time.taken,session_info,file="./Output/MC_Out.RData")
load("./Output/MC_Out.RData")
# RMSE
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE[1,i] <- sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
RMSE[2,i] <- sqrt((sum((sim_out$beta_twoSLS-1)^2)/unique(input$n)[i]))
RMSE[3,i] <- sqrt((sum((sim_out$beta_kernel-1)^2)/unique(input$n)[i]))
RMSE[4,i] <- sqrt((sum((sim_out$beta_lowess-1)^2)/unique(input$n)[i]))
RMSE[5,i] <- sqrt((sum((sim_out$beta_krls-1)^2)/unique(input$n)[i]))
}
RMSE2 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE2[1,i] <- mean(sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE2[2,i] <- mean(sqrt((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE2[3,i] <- mean(sqrt((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE2[4,i] <- mean(sqrt((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE2[5,i] <- mean(sqrt((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
RMSE3 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE3[1,i] <- sqrt(mean((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE3[2,i] <- sqrt(mean((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE3[3,i] <- sqrt(mean((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE3[4,i] <- sqrt(mean((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE3[5,i] <- sqrt(mean((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
n
input$n
n <- c(100,500,1000)
RMSE2 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE2[1,i] <- mean(sqrt((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE2[2,i] <- mean(sqrt((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE2[3,i] <- mean(sqrt((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE2[4,i] <- mean(sqrt((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE2[5,i] <- mean(sqrt((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
RMSE3 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE3[1,i] <- sqrt(mean((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE3[2,i] <- sqrt(mean((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE3[3,i] <- sqrt(mean((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE3[4,i] <- sqrt(mean((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE3[5,i] <- sqrt(mean((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
View(RMSE)
View(RMSE2)
View(RMSE3)
unique(input$n)
View(RMSE)
sim_out$beta_ols[input$n==n[i]
]
nrow(input)
sim_out$beta_ols[input$n==n[i]]-1
nrow(sim_out$beta_ols[input$n==n[i]])
length(sim_out$beta_ols[input$n==n[i]])
actual = c(1.5, 1.0, 2.0, 7.4, 5.8, 6.6)
predicted = c(1.0, 1.1, 2.5, 7.3, 6.0, 6.2)
unique(input$n)
sqrt((sum((predicted-actual)^2)/length(predicted)))
mean(sqrt((predicted-actual)^2))
sqrt((predicted-actual)^2)
(predicted-actual)^2
sqrt((predicted-actual)^2)
mean(sqrt((predicted-actual)^2))
sqrt(mean((predicted-actual)^2))
# RMSE
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE[1,i] <- sqrt((sum((sim_out$beta_ols-1)^2)/unique(input$n)[i]))
RMSE[2,i] <- sqrt((sum((sim_out$beta_twoSLS-1)^2)/unique(input$n)[i]))
RMSE[3,i] <- sqrt((sum((sim_out$beta_kernel-1)^2)/unique(input$n)[i]))
RMSE[4,i] <- sqrt((sum((sim_out$beta_lowess-1)^2)/unique(input$n)[i]))
RMSE[5,i] <- sqrt((sum((sim_out$beta_krls-1)^2)/unique(input$n)[i]))
}
RMSE3 <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
RMSE3[1,i] <- sqrt(mean((sim_out$beta_ols[input$n==n[i]]-1)^2))
RMSE3[2,i] <- sqrt(mean((sim_out$beta_twoSLS[input$n==n[i]]-1)^2))
RMSE3[3,i] <- sqrt(mean((sim_out$beta_kernel[input$n==n[i]]-1)^2))
RMSE3[4,i] <- sqrt(mean((sim_out$beta_lowess[input$n==n[i]]-1)^2))
RMSE3[5,i] <- sqrt(mean((sim_out$beta_krls[input$n==n[i]]-1)^2))
}
unique(input$n
)
n
View(RMSE)
View(RMSE3)
rmse <- function(pred, true=1){
return(sqrt(mean((pred-true)^2)))
}
sqrt(mean((sim_out$beta_ols[input$n==n[i]]-1)^2))
rmse(sim_out$beta_ols[input$n==n[i]])
colnames(input)
(input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0
& input$bw=.5 & input$exogenous=F)
(input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0
& input$bw=.5 & input$exogenous==F)
input$n==unique(input$n)[i]
input$n==unique(input$n)[i] & input$corr_xe==.3
input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3
input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0
input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0
& input$bw=.5
sel <- (input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$bw=.5 & input$exogenous==F)
input$bw=.5 & input$exogenous==F
sel <- input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$bw==.5 & input$exogenous==F
sel
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
sel <- input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$bw==.5 & input$exogenous==F
RMSE[1,i] <- rmse(pred=sim_out$beta_ols[sel],true=1)
RMSE[2,i] <- rmse(pred=sim_out$beta_twoSLS[sel],true=1)
RMSE[3,i] <- rmse(pred=sim_out$beta_kernel[sel],true=1)
RMSE[4,i] <- rmse(pred=sim_out$beta_lowess[sel],true=1)
RMSE[5,i] <- rmse(pred=sim_out$beta_krls[sel],true=1)
}
View(RMSE)
rm(list=ls())
load("./Output/MC_Out.RData")
rmse <- function(pred, true=1){
return(sqrt(mean((pred-true)^2)))
}
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
sel <- input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$bw==.5 & input$exogenous==F
RMSE[1,i] <- rmse(pred=sim_out$beta_ols[sel],true=1)
RMSE[2,i] <- rmse(pred=sim_out$beta_twoSLS[sel],true=1)
RMSE[3,i] <- rmse(pred=sim_out$beta_kernel[sel],true=1)
RMSE[4,i] <- rmse(pred=sim_out$beta_lowess[sel],true=1)
RMSE[5,i] <- rmse(pred=sim_out$beta_krls[sel],true=1)
}
View(RMSE)
colnames(input)
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
sel <- input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$gamma2==0 & input$bw==.5 & input$exogenous==F
RMSE[1,i] <- rmse(pred=sim_out$beta_ols[sel],true=1)
RMSE[2,i] <- rmse(pred=sim_out$beta_twoSLS[sel],true=1)
RMSE[3,i] <- rmse(pred=sim_out$beta_kernel[sel],true=1)
RMSE[4,i] <- rmse(pred=sim_out$beta_lowess[sel],true=1)
RMSE[5,i] <- rmse(pred=sim_out$beta_krls[sel],true=1)
}
View(RMSE)
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
sel <- input$n==unique(input$n)[i] & input$corr_xe==.3 & input$corr_xz==.3 & input$corr_ze==0 & input$gamma2==.5 & input$bw==.5 & input$exogenous==F
RMSE[1,i] <- rmse(pred=sim_out$beta_ols[sel],true=1)
RMSE[2,i] <- rmse(pred=sim_out$beta_twoSLS[sel],true=1)
RMSE[3,i] <- rmse(pred=sim_out$beta_kernel[sel],true=1)
RMSE[4,i] <- rmse(pred=sim_out$beta_lowess[sel],true=1)
RMSE[5,i] <- rmse(pred=sim_out$beta_krls[sel],true=1)
}
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
sel <- input$n==unique(input$n)[i] & input$corr_xe==.6 & input$corr_xz==.6 & input$corr_ze==0 & input$gamma2==.5 & input$bw==.5 & input$exogenous==F
RMSE[1,i] <- rmse(pred=sim_out$beta_ols[sel],true=1)
RMSE[2,i] <- rmse(pred=sim_out$beta_twoSLS[sel],true=1)
RMSE[3,i] <- rmse(pred=sim_out$beta_kernel[sel],true=1)
RMSE[4,i] <- rmse(pred=sim_out$beta_lowess[sel],true=1)
RMSE[5,i] <- rmse(pred=sim_out$beta_krls[sel],true=1)
}
View(RMSE)
RMSE <- matrix(NA,ncol=length(unique(input$n)),nrow=5)
for(i in 1:length(unique(input$n))){
sel <- input$n==unique(input$n)[i] & input$corr_xe==.6 & input$corr_xz==.6 & input$corr_ze==0 & input$gamma2==0 & input$bw==.5 & input$exogenous==F
RMSE[1,i] <- rmse(pred=sim_out$beta_ols[sel],true=1)
RMSE[2,i] <- rmse(pred=sim_out$beta_twoSLS[sel],true=1)
RMSE[3,i] <- rmse(pred=sim_out$beta_kernel[sel],true=1)
RMSE[4,i] <- rmse(pred=sim_out$beta_lowess[sel],true=1)
RMSE[5,i] <- rmse(pred=sim_out$beta_krls[sel],true=1)
}
